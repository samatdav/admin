{"version":3,"sources":["logo.svg","BoxButton.js","Box.js","Header.js","App.js","AdminBoxButton.js","AdminBox.js","Admin.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","BoxButton","props","react_default","a","createElement","className","text","Box","index","src_BoxButton","Header","children","Button","Link","to","App","src_Header","n","boxes","i","push","src_Box","makeBoxes","AdminBoxButton","AdminBox","src_AdminBoxButton","Admin","src_AdminBox","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","Route","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2IAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yQCSzBC,MANf,SAAmBC,GAClB,OACCC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAlB,IAAgCJ,EAAMK,KAAtC,MCSaC,MAVf,SAAaN,GACZ,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,eAAsCJ,EAAMO,OAC5CN,EAAAC,EAAAC,cAACK,EAAD,CAAWH,KAAK,aAChBJ,EAAAC,EAAAC,cAACK,EAAD,CAAWH,KAAK,6BCInB,SAASI,EAAOT,GACf,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbJ,EAAMU,UAKVD,EAAOE,OAjBP,SAAsBX,GACrB,OAEEC,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMC,GAAIb,EAAMa,IAChBZ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAAgBJ,EAAMK,QAc5BI,QCKAK,MArBf,SAAad,GASX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAACY,EAAD,KACEd,EAAAC,EAAAC,cAACY,EAAOJ,OAAR,CAAeE,GAAG,SAASR,KAAK,iBAXpB,SAACW,GAEf,IADA,IAAIC,EAAQ,GACHC,EAAI,EAAGA,EAAIF,EAAGE,IACrBD,EAAME,KAAKlB,EAAAC,EAAAC,cAACiB,EAAD,CAAKb,MAAOW,KAEzB,OAAOD,EASLI,CAAU,wBCZDC,MANf,SAAwBtB,GACvB,OACCC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAlB,IAAqCJ,EAAMK,KAA3C,MCSakB,MAVf,SAAkBvB,GACjB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,eAA2CJ,EAAMO,OACjDN,EAAAC,EAAAC,cAACqB,EAAD,CAAgBnB,KAAK,QACrBJ,EAAAC,EAAAC,cAACqB,EAAD,CAAgBnB,KAAK,cCiBToB,MArBf,SAAezB,GASd,OACCC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACY,EAAD,KACOd,EAAAC,EAAAC,cAACY,EAAOJ,OAAR,CAAeE,GAAG,IAAIR,KAAK,UAXlB,SAACW,GAEf,IADA,IAAIC,EAAQ,GACHC,EAAI,EAAGA,EAAIF,EAAGE,IACrBD,EAAME,KAAKlB,EAAAC,EAAAC,cAACuB,EAAD,CAAUnB,MAAOW,KAE9B,OAAOD,EASJI,CAAU,MCRGM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+ECVNC,IAASC,OACRhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,KACCjC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWxB,IACjCb,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWb,MAGjCc,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.65bde15d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './BoxButton.css'\n\nfunction BoxButton(props) {\n\treturn (\n\t\t<button className='BoxButton'> {props.text} </button>\n\t);\n}\n\nexport default BoxButton;","import React from 'react';\nimport './Box.css'\nimport BoxButton from './BoxButton'\n\nfunction Box(props) {\n\treturn (\n\t\t<div className='Box'> \n\t\t\t<div className='boxText'>I am order #{props.index}</div>\n\t\t\t<BoxButton text='Complete'/>\n\t\t\t<BoxButton text='Cancel'/>\n\t\t</div>\n\t);\n}\n\nexport default Box;","import React from 'react';\nimport './Header.css'\nimport { Link } from \"react-router-dom\";\n\nfunction HeaderButton(props) {\n\treturn (\n\t\t\n\t\t\t<Link to={props.to}>\n\t\t\t<button className='HeaderButton'>{props.text}</button>\n\t\t\t</Link>\n\t);\n}\n\nfunction Header(props) {\n\treturn (\n\t\t<div className='Header'>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\nHeader.Button = HeaderButton;\nexport default Header;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Box from './Box'\nimport Header from './Header'\n\nfunction App(props) {\n  let makeBoxes = (n) => {\n    let boxes = [];\n    for (let i = 0; i < n; i++) {\n      boxes.push(<Box index={i}/>);\n    }\n    return boxes;\n  }\n\n  return (\n    <div className=\"App\">\n    <Header>\n      <Header.Button to='/admin' text='Admin Panel'/>\n    </Header>\n    { \n      makeBoxes(10)\n    }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport './AdminBoxButton.css'\n\nfunction AdminBoxButton(props) {\n\treturn (\n\t\t<button className='AdminBoxButton'> {props.text} </button>\n\t);\n}\n\nexport default AdminBoxButton;","import React from 'react';\nimport './AdminBox.css'\nimport AdminBoxButton from './AdminBoxButton'\n\nfunction AdminBox(props) {\n\treturn (\n\t\t<div className='AdminBox'> \n\t\t\t<div className='AdminBoxText'>I am admin #{props.index}</div>\n\t\t\t<AdminBoxButton text='Add'/>\n\t\t\t<AdminBoxButton text='Disable'/>\n\t\t</div>\n\t);\n}\n\nexport default AdminBox;","import React from 'react';\nimport './Admin.css';\nimport Header from './Header'\nimport AdminBox from './AdminBox'\n\nfunction Admin(props) {\n  let makeBoxes = (n) => {\n    let boxes = [];\n    for (let i = 0; i < n; i++) {\n      boxes.push(<AdminBox index={i}/>);\n    }\n    return boxes;\n  }\n\n\treturn (\n\t\t<div>\n\t\t<Header>\n         <Header.Button to='/' text='Main'/>\n        </Header>\n\t\t{ \n\t      makeBoxes(30)\n\t    }\n\t\t</div>\n\t);\n}\n\nexport default Admin;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Admin from './Admin';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Route } from 'react-router-dom'\n\nReactDOM.render(\n\t<BrowserRouter>\n\t\t<div>\n\t\t\t<Route exact path=\"/\" component={App}/>\n\t\t\t<Route path=\"/admin\" component={Admin}/>\n\t\t</div>\n\t</BrowserRouter>, \n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}